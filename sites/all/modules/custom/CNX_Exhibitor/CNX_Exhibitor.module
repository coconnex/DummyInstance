<?php

require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Integrations/Coconnex/BackendAPIClient/Registration/Managers/APIRegistrationManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Utils/Handlers/TemplateHandler.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Registration/Managers/RegistrationManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Exhibitor/Managers/CNXExhibitorManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Integrations/Coconnex/BackendAPIClient/Masters/Managers/APIMastersManagers.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/ExhibitingCompany/Models/RequestModels/ExhibitorRequestModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/ExhibitingCompany/Models/CompanyContactModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/ExhibitingCompany/Models/CompanyAddressModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Utils/ObjectMapResolver/ObjectMapResolver.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Utils/Config/Config.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/StandTransaction/Collection/ExhibStandTransactions.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Integrations/Coconnex/BackendAPIClient/Packages/Managers/PackageListManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/Users/Models/EntityModels/UserEntityModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Exhibitor/Models/RequestModels/ExhibitorRequestModel.Class.php");

use Classes\Coconnex\Users\Models\EntityModels\UserEntityModel;
use Coconnex\API\ExhibitingCompany\Models\CompanyAddressModel;
use Coconnex\API\ExhibitingCompany\Models\CompanyContactModel;
use Coconnex\API\IFPSS\Exhibitor\Managers\CNXExhibitorManager;
use Coconnex\API\IFPSS\Exhibitor\Models\RequestModels\ExhibitorRequestModel;
use Coconnex\API\IFPSS\Registration\Managers\RegistrationManager;
use Coconnex\API\IFPSS\Registration\Models\EntityModels\RegistrationEntityModel;
use Coconnex\DBFactory\Db;
use Coconnex\Integrations\Coconnex\BackendAPIClient\Masters\Managers\APIMastersManagers;
use Coconnex\Utils\Handlers\TemplateHandler;
use Coconnex\Integrations\Coconnex\BackendAPIClient\Registration\Managers\APIRegistrationManager;
use Coconnex\API\ExhibitingCompany\Models\RequestModels\ExhibitorRequestModel as RequestModelsExhibitorRequestModel;
use Coconnex\API\IFPSS\StandTransaction\Collection\ExhibStandTransactions;
use Coconnex\Integrations\Coconnex\BackendAPIClient\Packages\Managers\PackageListManager;
use Coconnex\Utils\ObjectMapResolver\ObjectMapResolver;
use Coconnex\Utils\Config\Config;




function CNX_Exhibitor_menu()
{

    $items['exhibitor/profile'] = array(
        'title' => t('Exhibitor Data'),
        'page callback' => 'editExhibitorProfile',
        'access arguments' => array('Access Exhibitor Request')
    );

    $items['profile/compulsory'] = array(
        'title' => t('Exhibitor Data'),
        'page callback' => 'editExhibitorProfile',
        'access arguments' => array('Access Exhibitor Request')
    );


    return $items;
}

function CNX_Exhibitor_perm()
{
    return array('Access Exhibitor Request');
}

function editExhibitorProfile()
{
    global $user;
    $cnx_exh_mgr = new CNXExhibitorManager(0, $user->uid);
    $cnx_exh = $cnx_exh_mgr->exhibitor;
    $backend_ref = $cnx_exh->external_ref_id;
    $registration_id = $cnx_exh->registration_id;
    $get_sector_data = new APIMastersManagers('sectors');
    $sector_data = json_decode($get_sector_data->data, true);
    $mgr = new APIRegistrationManager($backend_ref);
    $vars['exhibitor'] = $mgr->exhibitor;
    $sql = "SELECT * FROM cnx_countries ORDER BY country_name ASC";
    $db = new Db();
    $result = $db->RetrieveRecord($sql);
    $vars['country_list'] = $result;
    $vars['sector_list'] = $sector_data;
    $vars['backend_end_ref'] = $backend_ref;
    $vars['registration_id'] = $registration_id;
    $vars['checkedit'] = $mgr->checkedit;

    $exhibitor_data = new CNXExhibitorManager(0,$user->uid);
    $customer_nid = $exhibitor_data->exhibitor->external_ref_id;

	$package_list = new PackageListManager($customer_nid);
	$arr_zone = $package_list->getZone();

	$self_stands = array();
	$obj_stand_transaction = new ExhibStandTransactions($user->uid,$user->roles,$customer_nid);
	foreach($obj_stand_transaction->exhib_stand_transactions as $idx => $transactions){
		if($transactions->status != 'CANCELLED'){
			$self_stands[] = $transactions->stand_ref_id;
		}
	}
	$stands_count = count($self_stands);
    $vars['editsector'] = $stands_count;
    $exhibitor_object = (object)$mgr->exhibitor;
    // debug( $exhibitor_object,1);
    $exhibitor_object->field_main_company = (object)$exhibitor_object->field_main_company;

    $exhib_request_model = new RequestModelsExhibitorRequestModel();
    $exhib_request_model->field_main_company->contacts->data['MAIN'] = new CompanyContactModel();

    $exhib_request_model->field_main_company->addresses->data['MAIN'] = new CompanyAddressModel();
    $exhib_request_model->field_main_company->statutory_information =(object)$exhibitor_object->field_main_company->statutory_information;
    if (isset($_POST['back_end_ref_id'])  && is_numeric($_POST['back_end_ref_id']) && ($_POST['back_end_ref_id'] > 0)) {
        global $user;
        $exhib_form_data_json = json_encode($_POST, JSON_FORCE_OBJECT);
        $comp_name = $_POST['company_name'];
        $register_data = new RegistrationEntityModel();
        $register_data->type = 'EXHIBITOR';
        $register_data->method = 'FORM';
        $register_data->data = $exhib_form_data_json;
        $register_data->id =  $_POST['registration_id'];
        $regist_manager = new RegistrationManager($register_data, $user->uid);
        $regist_id = $regist_manager->save_registration();

        $map = get_map();
        $src['FORMDATA'] = $_POST;
        $map_resolver = new ObjectMapResolver(array(&$exhib_request_model), $src, $map);
        $map_resolver->set_target();


        $updated_exhibitor = $exhib_request_model;
        if($_POST['edit_flag'] == 'disabled'){
            $map = get_map_edit();
            $src1['EXOBJ'] = $exhibitor_object;
            $map_resolver = new ObjectMapResolver(array(&$updated_exhibitor), $src1, $map);
            $map_resolver->set_target();
        }
        if(!$_POST['comapny_sector_id']){
            $updated_exhibitor->field_industry_sector= $exhibitor_object->field_industry_sector;
            $updated_exhibitor->field_industry_subsector =$exhibitor_object->field_industry_subsector;
        }
        $exhibitor  = serialize($updated_exhibitor);
        $exhib_mgr = new APIRegistrationManager($exhibitor);
        $ex_result = $exhib_mgr->exhibitor;
        if ($ex_result  > 0) {
            $cnxex_get_ex = new CNXExhibitorManager(0, $user->uid);
            $cnx_exhibitor = new ExhibitorRequestModel();
            $cnx_exhibitor->id = $cnxex_get_ex->exhibitor->id;
            $cnx_exhibitor->company_name = $comp_name;
            $cnx_exhibitor->user_ref_id =  $user->uid;
            $cnx_exhibitor->registration_id = $register_data->id;
            $cnx_exhibitor->is_validated = 1;
            $cnx_exhibitor->enabled = 1;
            $cnxex_mgr = new CNXExhibitorManager($cnx_exhibitor, $user->uid);
            $save_exhib = $cnxex_mgr->save_exhibitor();

            $first_name = $_POST['ex_contactfirstname'];
            $last_name = $_POST['ex_contactsurname'];
            $user_info = array(
                'profile_first_name' => $first_name,
                'profile_last_name' =>  $last_name,
            );
            $duser = new UserEntityModel($user->uid);
            $user_obj = $duser->getObj();
            profile_save_profile($user_info, $user_obj, 'User Information');

            session_unset();
            drupal_set_message('Exhibitor information updated successfully.');
            drupal_goto('/floorplan');
        }
    }
    $template_path = drupal_get_path('module', 'CNX_Registration') . "/templates/";

    if($_SERVER['REQUEST_URI'] == '/profile/compulsory'){
        $vars['compulsory_edit_mode'] = true;
        drupal_set_message('There is some compulsory information missing from your profile. Please complete your profile to continue.','error');
    }else{
        $vars['edit_mode'] = true;
    }


    $outHTML = TemplateHandler::applyTemplateFile($template_path, 'registrationform.tpl.php', $vars);
    return $outHTML;
}
function get_map_edit()
{
    $map_ini_edit = dirname(dirname(__FILE__)) . "/Classes/CNXCustomisations/Clarion/ObjectMaps/editompas.ini";
    $_map = parse_ini_file($map_ini_edit, true);
    return $_map['EXOBJ_EXREQMODEL'];
}
