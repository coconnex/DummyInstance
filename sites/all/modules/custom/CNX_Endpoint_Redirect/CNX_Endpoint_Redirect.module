<?php
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/StandTransaction/Collection/ExhibStandTransactions.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Exhibitor/Managers/CNXExhibitorManager.Class.php");
use Coconnex\API\IFPSS\StandTransaction\Collection\ExhibStandTransactions;
use Coconnex\API\IFPSS\Exhibitor\Managers\CNXExhibitorManager;

function CNX_Endpoint_Redirect_menu()
{
    $items['redirect/landing'] = array(
        'title' => t('Landing'),
        'page callback' => 'redirect_landing',
        'access arguments' => array('Access Endpoint_Redirect')
    );

    return $items;
}

function CNX_Endpoint_Redirect_perm()
{
    return array('Access Endpoint_Redirect');
}

function redirect_landing()
{
	global $user;

	$exhibitor_data = new CNXExhibitorManager(0,$user->uid);
	// debug($exhibitor_data);
	$exhibitorProfileStatus = $exhibitor_data->getExhibitorProfileStatus();
	// debug($exhibitorProfileStatus,1);
	$customer_id = $exhibitor_data->exhibitor->external_ref_id;
	$obj_stand_transaction = new ExhibStandTransactions($user->uid,$user->roles,$customer_id);
	//debug($obj_stand_transaction,1);
	$reserved = $obj_stand_transaction->counts_by_status['RESERVED'];
	$exlogcount = CNX_First_Time_Login_login_attempt_count($user->uid);

	if($exhibitorProfileStatus === false){
		drupal_goto('/profile/compulsory');
	}
	elseif($exlogcount==0){
		drupal_goto('/welcome');
	}
	else if(isset($obj_stand_transaction->counts_by_status['BOOKED']))
	{
		drupal_goto('/mystands/booked');
	}
	else if(isset($obj_stand_transaction->counts_by_status['RESERVED']))
	{
		drupal_goto('/mystands/reserved');
	}
	else{
		drupal_goto('/floorplan');
	}

}

function CNX_Endpoint_Redirect_user($op, &$edit, &$account, $category = NULL) {
	global $user;
	$cnx_exhibitor_role = "exhibitor";
	$cnx_organiser_role = "organiser";

	$exhibitor_destination = variable_get('CUSTOM_LANDING_PAGE', 'user');
	$organiser_destination = "mystands";
	$final_destination = "";

	if ((arg(0) == 'user' && arg(1) == 'reset') || ($account->force_password_change && $account->uid == $user->uid)) {
		return;
	}elseif(count(arg()) == 2 && (arg(0) == 'user' && arg(1) > 1 && is_numeric(arg(1)))){

		if(in_array($cnx_exhibitor_role, $account->roles)){
			if($final_destination == "") $final_destination = $exhibitor_destination;
		}
		if(in_array($cnx_organiser_role, $account->roles)){
			if($final_destination == "") $final_destination = $organiser_destination;
		}
		drupal_goto($final_destination);

	}elseif($op == 'login'){

		if(isset($_GET['destination'])){
			if(trim($_GET['destination']) != ""){
				$final_destination = $_GET['destination'];
			}
		}
		// debug("Inside",1);
		// CONDITION TO CHECK IF THE USER IS NOT AN ADMIN OR ANONYMOUS
		if($account->uid > 1){
			if(in_array($cnx_exhibitor_role, $account->roles)){
				if($final_destination == "") $final_destination = $exhibitor_destination;
			}
			if(in_array($cnx_organiser_role, $account->roles)){
				if($final_destination == "") $final_destination = $organiser_destination;
			}
		}
		if($account->uid == 1){
			if($final_destination == "") $final_destination="settings";
		}
		drupal_goto($final_destination);
	}
}


/**
 * CNX_Endpoint_Redirect_form_user_profile_form_alter
 *
 * This is altering the user profile form feature wherein after user password reset the user is taken to the custom landing page.
 *
 * @param  mixed $form
 * @param  mixed $form_state
 * @return void
 */
function CNX_Endpoint_Redirect_form_user_profile_form_alter(&$form, $form_state){
	// debug($form);
	// debug(" #################################################################################################### ");
	if(isset($form['account']['#title'])){
		// $form['account']['#title'] = 'Set your password';
		$form['account']['pass']['#required'] = 1;

	}

	$form['#submit'][] = 'redirect_user_after_password_reset';
	// debug($form,1);
}



function redirect_user_after_password_reset($form, &$form_state){
	$msg_to_be_removed = "The changes have been saved.";
	$index_to_be_removed = -1;
	$status_index_counts = -1;
	// LOOPING THROUGH THE DRUPAL 'STATUS' MESSAGES AND GETTING THE INDEX OF THE MESSAGE I'M LOOKING FOR IN $msg_to_be_removed
	if(isset($_SESSION['messages']['status'])){
		$status_index_counts = count($_SESSION['messages']['status']);
		foreach($_SESSION['messages']['status'] as $idx => $message){
			if($message == $msg_to_be_removed){
				$index_to_be_removed = $idx;
			}
		}
	}
	// REMOVING THE MESSAGE
	if($index_to_be_removed > -1){
		unset($_SESSION['messages']['status'][$index_to_be_removed]);
	}
	// IF THERE WAS A SINGLE MESSAGE IN THE STATUS INDEX, REMOVE THE STATUS INDEX
	if($status_index_counts == 1){
		unset($_SESSION['messages']['status']);
	}

	drupal_set_message("Your password has been saved successfully.");
	$form_state['redirect']  = variable_get('CUSTOM_LANDING_PAGE', 'user');
}