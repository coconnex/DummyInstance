<?php

/**
 * @file CNX_Common_Utility.module
 *
 * This module carries the common utility functions necessary for the rest of the CNX modules.
 */
function CNX_Common_Utility_menu() {

	$items['common/settings'] = array(
		'title' => t('Coconnex Common Settings'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('commonSettings'),
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Coconnex Custom Settings'),
	);

	$items['clear/data'] = array(
		'title' => t('Coconnex Data Refresh'),
		'page callback' => 'clearData',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Coconnex Custom Settings'),
	);

	// $items['auth'] = array(
	// 	'title' => '',
	// 	'page callback' => 'userauth',
	// 	'type' => MENU_CALLBACK,
	// 	'access arguments' => array('access auth login')
	// );

	$items['settings'] = array(
		'title' => t('Settings'),
		'page callback' => 'overallSettings',
		'page arguments' => array('commonSettings'),
		'type' => MENU_NORMAL_ITEM,
		  'access arguments' => array('Access Coconnex Custom Settings')
	);

	$items['settings/common'] = array(
		'title' => t('Coconnex Common Settings'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('commonSettings'),
		'type' => MENU_NORMAL_ITEM,
		  'access arguments' => array('Access Coconnex Custom Settings')
	);

	$items['mystands'] = array(
		'title' => '',
		'page callback' => 'usertest',
		'type' => MENU_CALLBACK,
		'access arguments' => array('access content')
	);

	$items['bookinghistorytest'] = array(
		'title' => '',
		'page callback' => 'booking_history',
		'type' => MENU_CALLBACK,
		'access arguments' => array('access content')
	);

	$items['orders'] = array(
		'title' => '',
		'page callback' => 'orders',
		'type' => MENU_CALLBACK,
		'access arguments' => array('access content')
	);
	return $items;
}
function usertest(){
	$outHTML = CNX_Common_Utility_getTemplate('mystand.tpl.php');
	// debug($outHTML,1);
	 return  $outHTML;
//  echo 'exhibitor zone';
}

function booking_history(){
	$outHTML = CNX_Common_Utility_getTemplate('bookinghistory.tpl.php');
	// debug($outHTML,1);
	 return  $outHTML;
//  echo 'exhibitor zone';
}

function orders(){
	$outHTML = CNX_Common_Utility_getTemplate('order.tpl.php');
	// debug($outHTML,1);
	 return  $outHTML;
//  echo 'exhibitor zone';
}

function CNX_Common_Utility_getTemplate($fileName, $vars = array())
{
	ob_start();
	include drupal_get_path('module', 'CNX_Common_Utility') . "/templates/" . $fileName;
	$contents = ob_get_contents();
	ob_end_clean();
	return $contents;
}

function clearData(){
	// truncateContentType("standdetails"); // USE IF CONTENT TYPES NEED TO BE TRUNCATED. ADD FOR EACH CONTENT TYPE.

	if(!isset($_POST['btnClear'])){
		echo "<span style='font-family: Arial; color: blue;'><b>This clears the data for a fresh setup.</b></span><br/><br/>";
		echo "<form method='post' name='frmClear'>";
		echo "<input type='submit' value='Go ahead and clear data' name='btnClear' /></form>";

	}else{
		echo "<span style='font-family: Arial; color: red;'><b>You confirmed data cleaning.</b></span><span style='font-family: Arial; color: green;'><b> Data is being cleaned.</b></span><br/><br/><br/>";

		$filesDataQuery = db_query('select * from files');
		while($fileData = db_fetch_object($filesDataQuery)){
			file_delete($fileData->filepath);
		}
		$files = glob(file_directory_path().'/tmp/*');// get all file names
		foreach($files as $file){
		  if(is_file($file))
			unlink($file); // delete file
		}

		$query = db_query("select nid from node where type = ''");
		while($data = db_fetch_object($query)){
			node_delete($data->nid);
		}

		db_query("TRUNCATE TABLE cnx_booking_history");
		db_query("TRUNCATE TABLE cnx_cart");
		db_query("TRUNCATE TABLE cnx_cart_items");
		db_query("TRUNCATE TABLE cnx_exhibitor");
		db_query("TRUNCATE TABLE cnx_stand_transaction");
		db_query("TRUNCATE TABLE cnx_stands_taken");
		db_query("TRUNCATE TABLE cnx_waiting_list");
		db_query("TRUNCATE TABLE registration_data");
		db_query("TRUNCATE TABLE cnx_first_time_login");
		db_query("TRUNCATE TABLE watchdog");

		mysql_query("UPDATE cnx_email_type SET additionalrecipients = '\{\"to\":[\"\"],\"cc\":[\"\"],\"bcc\":[\"\"]\}'");

		$query = db_query("SELECT ur.uid
		FROM role r
		INNER JOIN users_roles ur ON r.rid = ur.rid AND r.name = 'exhibitor';");
		while($data = db_fetch_object($query)){
			user_delete(NULL, $data->uid);
		}

		echo "<span style='font-family: Arial; color: brown;'><b> Data cleaned.</b></span>";
	}

	return;
}


function overallSettings(){
	global $base_path;

	// $path = $base_path."settings/floorplan-svg";
	// $import_path = $base_path."settings/import";
	$common_path = $base_path."settings/common";
	// $feed_path = $base_path."settings/feeds";
	$floorplan_path = $base_path."settings/floorplan";
	// $dxf_path = $base_path."settings/dxf";
	// $debug_path = $base_path."settings/debug";
	// $sf_path = $base_path."settings/msdyanamic";
	// $proplayer_path = $base_path."settings/proplayer";
	// $zones_path = $base_path."settings/zone";
	$output = "<style>
		#cnx_settings li{padding: 5px 15px;}
		#cnx_settings a{text-decoration: none;font-size: 14pt;}
	</style>";
	$output .= "<ol id='cnx_settings'>";
	// $output .= "<li><a href=$debug_path title='Debug Path'>Debug</a></li>";
	// $output .= "<li><a href=$path title='Split'>Split</a></li>";
	// $output .= "<li><a href=$import_path title='Import'>Import</a></li>";
	$output .= "<li><a href=$common_path title='Common'>Common</a></li>";
	// $output .= "<li><a href=$feed_path title='Feeds'>Feeds</a></li>";
	$output .= "<li><a href=$floorplan_path title='Floorplan'>Floorplan</a></li>";
	// $output .= "<li><a href=$dxf_path title='DXF Settings'>DXF</a></li>";
	// $output .= "<li><a href=$sf_path title='Salesforce Settings'>Salesforce CRM</a></li>";
	// $output .= "<li><a href=$proplayer_path title='Proposal Layer Settings'>Proposal Layer</a></li>";
	// if(module_exists("CNXZones")){
	// 	$output .= "<li><a href='/settings/zone' title='Zones Settings'>Zones</a></li>";
	// }
	// if(module_exists("StandRestrictionMeasurements")){
	// 	$output .= "<li><a href='/settings/standpdf' title='Stand Measurement PDF Settings'>Stand Measurement PDF</a></li>";
	// }
	// if(module_exists("CNX_Rebooking")){
	// 	$output .= "<li><a href='/rebooking/settings' title='Rebooking'>Rebooking</a></li>";
	// }

	$output .="</ol>";

	return 	$output;
}


function CNX_Common_Utility_perm(){
	return array("access auth login","Access Coconnex Custom Settings");
}

function debug($passvar, $isExit = 0)
{
	if (is_array($passvar)) {
		echo "<pre>";
		print_r($passvar);
		echo "</pre>";
	} elseif (is_object($passvar)) {
		echo "<pre>";
		print_r($passvar);
		echo "</pre>";
	} else
	echo "<pre>" . $passvar . "</pre>";
	if ($isExit == 1) exit;
}

/* Functions for define common variables.  */
function commonSettings() {

	global $base_url;
	$path = $base_url.'/settings';
	$elemwidth = "width: 150px;";

	$form['organiser_info_group'] = array(
		'#type' => 'fieldset',
		'#title' => t('<b>Organiser Information</b>'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
		'#attributes' => array('style' => 'border:2px solid #d5d5d5; padding: 7px; margin-bottom: 10px; margin-top: 10px;')
	);

	$form['organiser_info_group']['ORGANISER_NAME'] = array(
		'#type' => 'textfield',
		'#title' => t('Name of the organising company'),
		'#default_value' => variable_get('ORGANISER_NAME', ''),
		'#description' => t('Name of the organising company as required in PDF, reports etc.')
	);
	$form['organiser_info_group']['ORG_SALES_TEAM_NAME'] = array(
		'#type' => 'textfield',
		'#title' => t('Organiser\'s Sales Team Name'),
		'#default_value' => variable_get('ORG_SALES_TEAM_NAME', ''),
		'#description' => t('Enter organiser\'s Sales Team Name')
	);
	$form['organiser_info_group']['ORG_OPS_TEAM_NAME'] = array(
		'#type' => 'textfield',
		'#title' => t('Organiser\'s Operations Team Name'),
		'#default_value' => variable_get('ORG_OPS_TEAM_NAME', ''),
		'#description' => t('Enter organiser\'s Operations Team Name')
	);
	$form['organiser_info_group']['ORG_SALES_TEAM_EMAIL'] = array(
		'#type' => 'textfield',
		'#title' => t('Organiser\'s Sales Team Email'),
		'#default_value' => variable_get('ORG_SALES_TEAM_EMAIL', ''),
		'#description' => t('Enter organiser\'s Sales Team Email')
	);
	$form['organiser_info_group']['ORG_OPS_TEAM_EMAIL'] = array(
		'#type' => 'textfield',
		'#title' => t('Organiser\'s Operations Team Email'),
		'#default_value' => variable_get('ORG_OPS_TEAM_EMAIL', ''),
		'#description' => t('Enter organiser\'s Operations Team Email')
	);

	$form['CURRENCYNAME'] = array(
		'#type' => 'textfield',
		'#title' => t('Currency Name'),
		'#default_value' => variable_get('CURRENCYNAME', 'Sterling'),
		'#description' => t('Enter Currency'),
	);

	$form['CURRENCYSYMBOL'] = array(
		'#type' => 'textfield',
		'#title' => t('Currency Symbol'),
		'#default_value' => variable_get('CURRENCYSYMBOL', '&#163;'),
		'#description' => t('Enter HTML Number of currency'),
	);

	$form['MEASURMENTUNIT'] = array(
		'#type' => 'textfield',
		'#title' => t('Measurement Unit'),
		'#default_value' => variable_get('MEASURMENTUNIT', 'Sqm'),
		'#description' => t(''),
	);

	$form['SHOWMEASURMENTUNIT'] = array(
		'#type' => 'textfield',
		'#title' => t('Display unit on floorplan'),
		'#default_value' => variable_get('SHOWMEASURMENTUNIT', 'true'),
		'#description' => t(''),
	);

	$form['SINGLEUNIT'] = array(
		'#type' => 'textfield',
		'#title' => t('Single Measurement Unit'),
		'#default_value' => variable_get('SINGLEUNIT', 'M'),
		'#description' => t(''),
	);

	$form['MAX_WORD_LENGTH_FOR_REASON'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum words count for reason when request contract cancellation'),
		'#default_value' => variable_get('MAX_WORD_LENGTH_FOR_REASON', '500'),
		'#description' => t(''),
	);

	$form['landingpagegroup'] = array(
		'#type' => 'fieldset',
		'#title' => t('<b>Home/Landing page after authentication</b>'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
		'#attributes' => array('style' => 'border:2px solid #d5d5d5; padding: 7px; margin-bottom: 10px; margin-top: 10px;')
	);

	$form['landingpagegroup']['CUSTOM_LANDING_PAGE'] = array(
		'#type' => 'textfield',
		'#title' => t('Provide the landing page url after login or password reset'),
		'#default_value' => variable_get('CUSTOM_LANDING_PAGE', 'user'),
		'#description' => t("Add a '/' at the start of the url. <i><b>Don't add the url with a http or https.</b></i>"),
	);

	$form['recaptchagroup'] = array(
		'#type' => 'fieldset',
		'#title' => t('<b>Controlling recaptcha feature on Registration page</b>'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
		'#attributes' => array('style' => 'border:2px solid #d5d5d5; padding: 7px; margin-bottom: 10px; margin-top: 10px;')
	);

	$form['recaptchagroup']['reCAPTCHA_site_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Provide the recaptcha site key'),
		'#default_value' => variable_get('reCAPTCHA_site_key', ''),
		'#description' => t(""),
	);

	$form['recaptchagroup']['reCAPTCHA_secret_key'] = array(
		'#type' => 'textfield',
		'#title' => t('Provide the recaptcha secret key'),
		'#default_value' => variable_get('reCAPTCHA_secret_key', ''),
		'#description' => t(""),
	);

	$form['appfeaturegroup'] = array(
		'#type' => 'fieldset',
		'#title' => t('<b>Controlling application features</b>'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
		'#attributes' => array('style' => 'border:2px solid #d5d5d5; padding: 7px; margin-bottom: 10px; margin-top: 10px;')
	);

	$form['appfeaturegroup']['IS_WAITINGLIST'] = array(
		'#type' => 'select',
		'#title' => t('Control whether Waiting List feature is active'),
		'#options' => array('1'=>'Active', '0'=>'Not active'),
		'#default_value' => variable_get('IS_WAITINGLIST', '0'),
		'#attributes' => array('data-role' => 'none', "style" => $elemwidth)
	);

	$form['appfeaturegroup']['IS_GRACEPERIOD'] = array(
		'#type' => 'select',
		'#title' => t('Control whether Grace Period feature is active'),
		'#options' => array('1'=>'Active', '0'=>'Not active'),
		'#default_value' => variable_get('IS_GRACEPERIOD', '0'),
		'#attributes' => array('data-role' => 'none', "style" => $elemwidth)
	);



	$form['email_mode'] = array(
		'#type' => 'select',
		'#title' => t('Flag to allow repeat user registration'),
		'#options' => array('TEST'=>'Test mode', 'LIVE'=>'Live mode'),
		'#default_value' => variable_get('email_mode', 'TEST'),
		'#description' => t(''),
	);

	$form['IS_CRM_INTEGRATED'] = array(
		'#type' => 'select',
		'#title' => t('Control whether CRM integaration feature is active'),
		'#options' => array('1'=>'Active', '0'=>'Not active'),
		'#default_value' => variable_get('IS_CRM_INTEGRATED', '0'),
		'#description' => t(''),
	);

	$form['BACK'] = array(
		'#type' => 'item',
		'#value' => "<a href='/settings' class='form-submit' style='font-size: 12pt;'>< Back to settings</a>",
		'#weight' => 20,
	);

	return system_settings_form($form);
}

function truncateContentType($contentType) {
	$sql = db_query("SELECT nid FROM node WHERE TYPE='".$contentType."'");
	while ($row = db_fetch_object($sql)) {
			node_delete($row->nid);
	}
}

/* Function for sending mail */
function COCONNEX_Mail($arMail) {

	require_once(drupal_get_path('module', 'smtp') .'/phpmailer/class.phpmailer.php');

    $mail = new PHPMailer();

	$mail->IsHTML(true);
    $mail->IsSMTP();            // set mailer to use SMTP
    $mail->SMTPAuth = true;     // turn on SMTP authentication
    $mail->Host   = variable_get('smtp_host', '');
    $mail->Username = variable_get('smtp_username', '');
    $mail->Password = variable_get('smtp_password', '');
	$mail->CharSet = 'UTF-8';
	$mail->Encoding = 'quoted-printable';

	if($arMail['to'] != "") {
		$toList = explode(",",$arMail['to']);
		foreach($toList as $to) {
		  $mail->AddAddress($to);
		}
	}

	if($arMail['from']!=''){
		$mail->From     = $arMail['from'];
	} else {
		$mail->From     = variable_get('smtp_from', '');
	}

	if($arMail['fromName']!=''){
		$mail->FromName = $arMail['fromName'];
	} else {
		$mail->FromName = variable_get('smtp_fromname', '');
	}

	if($arMail['cc'] != "") {
		$ccList = explode(",",$arMail['cc']);
		foreach($ccList as $cc) {
		  $mail->AddCC($cc);
		}
	}

	if($arMail['bcc'] != "") {
		$bccList = explode(",",$arMail['bcc']);
		foreach($bccList as $bcc) {
		  $mail->AddBCC($bcc);
		}
	}

	if($arMail['filePath'] != "") {
		if(is_array($arMail['filePath'])){
			foreach($arMail['filePath'] as $filepath) {
				$mail->AddAttachment($filepath);
			}
		} else {
			$mail->AddAttachment($arMail['filePath'], $arMail['fileName']);
		}
	}

	$mail->Subject = $arMail['subject'];
    $mail->Body    = $arMail['body'];

    $result = $mail->Send();

	if($result == true or $result ==1) {
		$result = 1;
	  	@watchdog('COCONNEX_Mail', 'Outgoing email. Message type: %type<br />Subject: %subject<br />Recipient: %to', array('%type' => $arMail['key'], '%to' => $arMail['to'], '%subject' => $arMail['subject']), WATCHDOG_DEBUG);
	}
	else {
		$result = 0;
	 	@watchdog('COCONNEX_Mail', 'Outgoing email failed. Message type: %type<br />Subject: %subject<br />Recipient: %to', array('%type' => $arMail['key'], '%to' => $arMail['to'], '%subject' => $arMail['subject']), WATCHDOG_ERROR);

	}

	return $result;
}


function writeToFile($filename, $messageToWrite, $moduleName)
{
	$fh = fopen($filename, 'a');
	fwrite($fh, $moduleName." > ".$messageToWrite."\n");
	fclose($fh);
	return;
}


