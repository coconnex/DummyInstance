<?php

require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Registration/Models/RequestModels/RegistrationRequestModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Registration/Managers/RegistrationManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Integrations/Coconnex/BackendAPIClient/Registration/Managers/APIRegistrationManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Exhibitor/Models/RequestModels/ExhibitorRequestModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Exhibitor/Managers/CNXExhibitorManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Utils/Handlers/TemplateHandler.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/Users/Models/EntityModels/UserEntityModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Utils/Config/Config.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/OTP/OTPManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/ExhibitingCompany/Models/RequestModels/ExhibitorRequestModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/ExhibitingCompany/Models/CompanyContactModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/ExhibitingCompany/Models/CompanyAddressModel.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Utils/ObjectMapResolver/ObjectMapResolver.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Integrations/Coconnex/BackendAPIClient/Masters/Managers/APIMastersManagers.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Utils/Extractors/TelephoneExtractor/CountryCodeExtractor.Class.php");




use Classes\Coconnex\Users\Models\EntityModels\UserEntityModel;
use Coconnex\API\ExhibitingCompany\Models\CompanyAddressModel;
use Coconnex\API\ExhibitingCompany\Models\CompanyContactModel;
use Coconnex\API\ExhibitingCompany\Models\RequestModels\ExhibitorRequestModel as RequestModelsExhibitorRequestModel;
use Coconnex\API\ExhibitingCompany\Models\ResponseModels\ExhibitorResponseModel;
use Coconnex\Utils\Handlers\TemplateHandler;
use Coconnex\DBFactory\Db;
use Coconnex\API\IFPSS\Exhibitor\Managers\CNXExhibitorManager;
use Coconnex\API\IFPSS\Exhibitor\Models\EntityModels\ExhibitorEntityModel;
use Coconnex\API\IFPSS\Exhibitor\Models\RequestModels\ExhibitorRequestModel;
use Coconnex\API\IFPSS\OTP\OTPManager;
use Coconnex\API\IFPSS\Registration\Managers\RegistrationManager;
use Coconnex\API\IFPSS\Registration\Models\EntityModels\RegistrationEntityModel;
use Coconnex\Integrations\Coconnex\BackendAPIClient\Masters\Managers\APIMastersManagers;
use Coconnex\Integrations\Coconnex\BackendAPIClient\Registration\Managers\APIRegistrationManager;
use Coconnex\Utils\Config\Config;
use Coconnex\Utils\ObjectMapResolver\ObjectMapResolver;

function CNX_Registration_menu()
{

    $items['registration/exhibitor'] = array(
        'title' => t('Exhibitor Registration'),
        'page callback' => 'registrationRequest',
        'access arguments' => array('Access Registration Request')
    );
    $items['participation/confirm'] = array(
        'title' => t('Exhibitor Registration'),
        'page callback' => 'registrationQuestion',
        'access arguments' => array('Access Registration Request')
    );
    $items['registration/check'] = array(
        'title' => t('Exhibitor Check'),
        'page callback' => 'registrationCheckRequest',
        'access arguments' => array('Access Registration Request')
    );
    $items['email/check'] = array(
        'title' => t('Exhibitor Check'),
        'page callback' => 'emailCheckRequest',
        'access arguments' => array('Access Registration Request')
    );
    $items['newemail/check'] = array(
        'title' => t('Exhibitor Check'),
        'page callback' => 'newEmailCheckRequest',
        'access arguments' => array('Access Registration Request')
    );
    $items['registration/preregister'] = array(
        'title' => t('Exhibitor Pre Register'),
        'page callback' => 'exhibitorPreRegistrationRequest',
        'access arguments' => array('Access Registration Request')
    );
    $items['confirm/registration'] = array(
        'title' => t('Confirm Registration'),
        'page callback' => 'confirmRegistration',
        'access arguments' => array('Access Registration Request')
    );
    $items['welcome/email'] = array(
        'title' => t('Send Welcome Email'),
        'page callback' => 'sendWelcomeEmail',
        'access arguments' => array('Access Registration Request')
    );
    return $items;
}

function CNX_Registration_perm()
{
    return array('Access Registration Request');
}
function registrationQuestion()
{

    $template_path = drupal_get_path('module', 'CNX_Registration') . "/templates/";
    $outHTML = TemplateHandler::applyTemplateFile($template_path, 'confirm_participation.tpl.php', array());
    return $outHTML;
}
function registrationCheckRequest()
{
    session_unset();

    $template_path = drupal_get_path('module', 'CNX_Registration') . "/templates/";
    $outHTML = TemplateHandler::applyTemplateFile($template_path, 'accept_email.tpl.php', array());
    return $outHTML;
}
function emailCheckRequest()
{
    $data = file_get_contents('php://input');
    $data = json_decode($data);
    $exhibitor_email = $data->email;
    $sql = "SELECT uid FROM users where mail = '$exhibitor_email' ";
    $Db_query = new Db();
    $result = $Db_query->RetrieveRecord($sql);
    if ($result && $result !== '') {
        $new_user = user_load($result[0]);
        _user_mail_notify('password_reset', $new_user);
        $response['status'] = 1;
        $response['message'] = 'This email is already registered, we have sent you password reset link for you to reset your password & access.';
    } else {
        $check_atback_end = new APIRegistrationManager($exhibitor_email);
        // debug($check_atback_end->exhibitor,1);
        if ($check_atback_end->exhibitor) {
            $sf_exhibitor = json_decode($check_atback_end->exhibitor);
            if ($sf_exhibitor) {
                if (session_status() === PHP_SESSION_DISABLED) {
                    session_start();
                }
                $_SESSION['sf_exhibitor'] = serialize($sf_exhibitor);
                $otp_mgr = new OTPManager();
                $otp_mgr->generate();
            } else {
                $response['status'] = 0;
                $response['message'] = 'Email not found.';
            }
        }
    }
    echo json_encode($response);
    exit;
}
function newEmailCheckRequest()
{
    $data = file_get_contents('php://input');
    $data = json_decode($data);
    $exhibitor_email = $data->email;
    $test_mode = variable_get('email_mode', '');


    $response = array();
    $response['status'] = 0;
    $response['message'] = 'Email not found.';

    $sql = "SELECT uid FROM users where mail = '$exhibitor_email' ";
    $Db_query = new Db();
    $result = $Db_query->RetrieveRecord($sql);

    if ($result && $result !== '') {
        if ($test_mode == 'TEST') {
            $new_user = user_load($result[0]);
            $details = array(
                'name' =>  $new_user->uid . "_" . $new_user->name,
                'mail' => $new_user->uid . "__" . $new_user->mail,
            );

            $user  = new UserEntityModel($new_user->uid);
            // debug( $user->edit($details,1));
            $user->edit($details);
            $response['status'] = 0;
            $response['message'] = 'Email updated.';
        } else {
            $new_user = user_load($result[0]);
            _user_mail_notify('password_reset', $new_user);
            $response['status'] = 1;
            $response['message'] = 'This email is already registered, we have sent you password reset link for you to reset your password & access.';
        }
    }
    echo json_encode($response);
    exit;
}
function exhibitorPreRegistrationRequest()
{
    $session_data = unserialize($_SESSION['sf_exhibitor']);

    $data = file_get_contents('php://input');
    $data = json_decode($data);
    $exhibitor_email = $data->email;
    // debug( $session_data,1);
    $sf_exhibitor = new stdClass();
    $sf_exhibitor->sf_email = $exhibitor_email;
    $sf_exhibitor->sf_con_account_id = $session_data->account_id;
    $sf_exhibitor->sf_con_contact_id = $session_data->contact_id;

    $sf_exhibitor_details = serialize($sf_exhibitor);
    $exhib_preregister = new APIRegistrationManager($sf_exhibitor_details);
    $exhibitor_details = (object)$exhib_preregister->exhibitor;

    $register_data = new RegistrationEntityModel();
    $register_data->type = 'EXHIBITOR';
    $register_data->method = 'LOOKUP';
    $register_data->backend_ref = $exhibitor_details->exhib_nid;
    $register_data->data = json_encode($exhibitor_details);
    if (is_numeric($register_data->backend_ref) && $register_data->backend_ref > 0) {
        $regist_manager = new RegistrationManager($register_data, 0);
        $regist_id = $regist_manager->save_registration();
        if ($regist_id) {
            $obj_config = new Config("d6");
            $role_array = $obj_config->getSpecificRoles('exhibitor');
            $duser = new UserEntityModel(0);
            $details = array(
                'name' =>  $exhibitor_details->exhib_cont_mail,
                'pass' => '',
                'mail' => $exhibitor_details->exhib_cont_mail,
                'access' => 0,
                'status' => 1,
                'roles' => array_keys($role_array),
            );
            $user_id = $duser->add($details);
            // mail for reset password
            $new_user = user_load(array('uid' => $user_id));
            _user_mail_notify('register_no_approval_required', $new_user);
            $user_info = array(
                'profile_first_name' =>  $exhibitor_details->first_name,
                'profile_last_name' =>  $exhibitor_details->last_name,
            );
            $duser = new UserEntityModel($user_id);
            $user_obj = $duser->getObj();
            profile_save_profile($user_info, $user_obj, 'User Information');

            if ($regist_id > 0 && $user_id > 0) {
                $cnx_exhibitor = new ExhibitorRequestModel();
                $cnx_exhibitor->company_name = $exhibitor_details->exhib_comp_name;
                $cnx_exhibitor->user_ref_id =  $user_id;
                $cnx_exhibitor->external_ref_id = $exhibitor_details->exhib_nid;
                $cnx_exhibitor->registration_id = $regist_id;
                $cnx_exhibitor->is_validated = 1;
                $cnx_exhibitor->enabled = 1;
                $cnxex_mgr = new CNXExhibitorManager($cnx_exhibitor, 0);
                $user_saved = $cnxex_mgr->save_exhibitor();
                if ($user_saved) {
                    $response['status'] = 1;
                    $response['message'] = 'User preregistered successdfully.';
                } else {
                    $response['status'] = 0;
                    $response['message'] = 'Error in saving user data, please try again!.';
                }
            } else {
                $response['status'] = 0;
                $response['message'] = 'Error in saving user data, please try again!.';
            }
        }
    } else {
        $response['status'] = 0;
        $response['message'] = 'Error in saving user data, please try again!.';
    }
    echo json_encode($response);
    exit;
}


function registrationRequest()
{

    $get_sector_data = new APIMastersManagers('sectors');
    // debug($get_sector_data);
    $sector_data = json_decode($get_sector_data->data, true);
    // debug($_POST,1);

    $sql = "SELECT * FROM cnx_countries where active = 1 ORDER BY country_name ASC";
    $db = new Db();
    $result = $db->RetrieveRecord($sql);
    $vars['country_list'] = $result;
    $vars['sector_list'] = $sector_data;
    $vars['registration_mode'] = true;
    if ($_SERVER['REQUEST_METHOD'] == 'POST' && ($_POST['company_name'] != '')) {
        // debug($_POST, 1);
        $exhib_form_data_json = json_encode($_POST, JSON_FORCE_OBJECT);
        $exhib_request = new RequestModelsExhibitorRequestModel();
        $exhib_request->field_main_company->contacts->data['MAIN'] = new CompanyContactModel();
        $exhib_request->field_main_company->contacts->data['MAIN']->type = "MAIN";
        if ($_POST['ex_bill_contactfirstname'] != '') {
            $exhib_request->field_main_company->contacts->data['BILLING'] = new CompanyContactModel();
            $exhib_request->field_main_company->contacts->data['BILLING']->type = "BILLING";
        }
        $exhib_request->field_main_company->addresses->data['MAIN'] = new CompanyAddressModel();
        $exhib_request->field_main_company->addresses->data['MAIN']->type  = "MAIN";

        $map = get_map();
        $src['FORMDATA'] = $_POST;
        $map_resolver = new ObjectMapResolver(array(&$exhib_request), $src, $map);
        $map_resolver->set_target();

        $exhibitor  = serialize($exhib_request);
        $first_name = $_POST['ex_contactfirstname'];
        $last_name = $_POST['ex_contactsurname'];
        $comp_name = $_POST['company_name'];
        $cont_mail = $_POST['ex_contactemail'];
        $register_data = new RegistrationEntityModel();
        // debug(  $cont_mail,1 );
        $register_data->type = 'EXHIBITOR';
        $register_data->method = 'FORM';
        $register_data->data = $exhib_form_data_json;
        $register_data->backend_ref = 0;
        $regist_manager = new RegistrationManager($register_data, 0);

        // debug($regist_manager->save_registration(),1);
        $regist_id = $regist_manager->save_registration();
        // debug( $regist_id,1);
        $exhib_mgr = new APIRegistrationManager($exhibitor);
        $ex_result = $exhib_mgr->exhibitor;
        // debug( $ex_result,1);780539
        if ($ex_result) {
            $register_data = new RegistrationEntityModel(0, $regist_id);
            $register_data->backend_ref = $ex_result;
            $regist_manager = new RegistrationManager($register_data, 0);
            $regist_saved = $regist_manager->save_registration();

            $obj_config = new Config("d6");
            $role_array = $obj_config->getSpecificRoles('exhibitor');

            if ($regist_saved) {
                $duser = new UserEntityModel(0);
                $details = array(
                    'name' => $cont_mail,
                    'pass' => '',
                    'mail' => $cont_mail,
                    'access' => 0,
                    'status' => 1,
                    'roles' => array_keys($role_array),
                );

                $user_id = $duser->add($details);
                //  debug( $user_id,1);
                $new_user = user_load(array('uid' => $user_id));
                $user_info = array(
                    'profile_first_name' => $first_name,
                    'profile_last_name' =>  $last_name,
                );
                $duser = new UserEntityModel($user_id);
                $user_obj = $duser->getObj();
                profile_save_profile($user_info, $user_obj, 'User Information');
                _user_mail_notify('register_no_approval_required', $new_user);
            }
            if ($regist_id > 0 && $user_id > 0) {
                $cnx_exhibitor = new ExhibitorRequestModel();
                $cnx_exhibitor->company_name = $comp_name;
                $cnx_exhibitor->user_ref_id =  $user_id;
                $cnx_exhibitor->external_ref_id = $ex_result;
                $cnx_exhibitor->registration_id = $regist_id;
                $cnx_exhibitor->is_validated = 1;
                $cnx_exhibitor->enabled = 1;
                $cnxex_mgr = new CNXExhibitorManager($cnx_exhibitor, 0);
                $user_saved = $cnxex_mgr->save_exhibitor();
                session_unset();
                if ($user_saved) {
                    drupal_goto('confirm/registration');
                } else {
                    drupal_set_message('Error in saving your data please try again.');
                }
            }
        } else {
            drupal_set_message('Error in saving your data please try again.');
        }
        // }
    }

    $obj_config = new Config("d6");
    $test_mode =  $obj_config->getvar('email_mode');
    if ($test_mode == 'TEST') {
        drupal_set_message("The application is currently on TEST MODE. The main contacts email addresses will not be tested for uniqueness and you will be allowed to use the same email address multiple times. The only drawback being that the earlier account will be renamed automatically. If you need access to any earlier account please contact us.");
    }
    $template_path = drupal_get_path('module', 'CNX_Registration') . "/templates/";
    $vars['registration_mode'] = true;
    $vars['sales_team_email'] = $obj_config->getvar('ORG_SALES_TEAM_EMAIL');
    $outHTML = TemplateHandler::applyTemplateFile($template_path, 'registrationform.tpl.php', $vars);
    return $outHTML;
}
function get_map()
{
    $map_ini = dirname(dirname(__FILE__)) . "/Classes/CNXCustomisations/Clarion/ObjectMaps/omaps.ini";
    $_map = parse_ini_file($map_ini, true);
    return $_map['FORMDATA_CNXACC'];
}
function confirmRegistration()
{
    $template_path = drupal_get_path('module', 'CNX_Registration') . "/templates/";
    $outHTML = TemplateHandler::applyTemplateFile($template_path, 'pre_registration_confirmation.tpl.php', array());
    return $outHTML;
}
function sendWelcomeEmail($uid = null)
{
    $new_user = user_load($uid);
    $result = _user_mail_notify('register_no_approval_required', $new_user);
    return ($result == 1) ? 'SUCCESS' : 'FAILURE';
}
