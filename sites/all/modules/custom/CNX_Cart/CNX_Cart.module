<?php

require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/Cart/Cart/Managers/CartManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/Cart/CartItem/Managers/CartItemManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/Integrations/Coconnex/BackendAPIClient/StandTransactions/Managers/ReserveManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/StandTransaction/Managers/StandTransactionManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/WaitingList/WaitingListItem/Managers/WaitingListItemManager.Class.php");
require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/Exhibitor/Managers/CNXExhibitorManager.Class.php");

require_once(dirname(dirname(__FILE__)) . "/Classes/Coconnex/API/IFPSS/BookingHistory/Managers/BookingHistoryManager.Class.php");
use Coconnex\API\Cart\Cart\Managers\CartManager;
use Coconnex\API\Cart\Cart\Models\RequestModels\CartRequestModel;
use Coconnex\API\Cart\CartItem\Managers\CartItemManager;
use Coconnex\API\Cart\CartItem\Models\RequestModels\CartItemRequestModel;
use Coconnex\Integrations\Coconnex\BackendAPIClient\StandTransactions\Managers\ReserveManager;
use Coconnex\API\IFPSS\StandTransaction\Models\RequestModels\StandTransactionRequestModel;
use Coconnex\API\IFPSS\StandTransaction\Managers\StandTransactionManager;
use Coconnex\API\IFPSS\WaitingList\WaitingListItem\Managers\WaitingListItemManager;
use Coconnex\API\IFPSS\WaitingList\WaitingListItem\Models\RequestModels\WaitinglistItemRequestModel;

use Coconnex\API\IFPSS\BookingHistory\Managers\BookingHistoryManager;
use Coconnex\API\IFPSS\BookingHistory\Models\RequestModels\BookingHistoryRequestModel;

use Coconnex\API\IFPSS\Exhibitor\Managers\CNXExhibitorManager;
use Coconnex\Utils\Config\Config;

/**
 * @file CNX_Cart.module
 *
 * Cart module for manage cart functionalities.
 */
function CNX_Cart_menu() {
    $items['cart/test'] = array(
		'title' => t('Coconnex API Library'),
		'page callback' => 'library_test',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Cart'),
	);

    $items['stand/details'] = array(
		'title' => t('Stand details'),
		'page callback' => 'stand_details',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Cart'),
	);

    $items['cart/add'] = array(
		'title' => t('Add to Cart'),
		'page callback' => 'add_to_cart',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Cart'),
	);

    $items['cart/details'] = array(
		'title' => t('Cart Details'),
		'page callback' => 'cart_details',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Cart'),
	);

    $items['cart/removeitem'] = array(
		'title' => t('Remove Cart Item'),
		'page callback' => 'remove_cart_item',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Cart'),
	);

    $items['cart/reserve'] = array(
		'title' => t('Stand Reservation'),
		'page callback' => 'cart_reserve',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Cart'),
	);
    $items['bookinghistory/save'] = array(
		'title' => t('Bookinghistory save'),
		'page callback' => 'bookinghistory_save',
		'type' => MENU_CALLBACK,
		'access arguments' => array('Access Cart'),
	);
	return $items;
}

function CNX_Cart_perm(){
	return array('Access Cart');
}

function CNX_Cart_Get_Template($fileName, $vars = array())
{
	ob_start();
	include drupal_get_path('module', 'CNX_Cart') . "/templates/" . $fileName;
	$contents = ob_get_contents();
	ob_end_clean();
	return $contents;
}

function cart_reserve(){
    global $user;
    if (isset($user) && in_array('exhibitor', $user->roles)) {
        $cart = unserialize($_SESSION['cart']);
        // if(empty($cart)){
        //     $exhibitor = new CNXExhibitorManager(0,$user->uid);
        //     $customer_id = $exhibitor->exhibitor->external_ref_id;
        //     $cart = set_cart($customer_id);
        // }
        $process_status_arr = array();
        if($cart){
            if(sizeof($cart->cart_items) > 0){
                $exhibitor = new CNXExhibitorManager(0,$user->uid);
                $exhibCompanyName = $exhibitor->exhibitor->company_name;

                $exhib_arr = array("exhib_nid" => $cart->customer_id,"exhib_name" => $exhibCompanyName, "exhib_mail" => $user->mail);

                for ($i = 0; $i < sizeof($cart->cart_items); $i++) {
                    $cart_item = $cart->cart_items[$i];
                    $result = db_query("insert into cnx_stands_taken (stand_ref_id) values(%d)",$cart_item->stand_ref_id);
                    if($result == 1){
                        $stand_arr = array("stand_number" => $cart_item->additional_info->stand_no,
                        "stand_nid" => $cart_item->stand_ref_id,
                        "stand_area" => $cart_item->quantity,
                        "stand_type" => $cart_item->product_key);

                        $stand_obj = (object)$stand_arr;
                        $exhib_obj = (object)$exhib_arr;

                        $ReserveManager = new ReserveManager($stand_obj,$exhib_obj);
                        $reserve_response = json_decode($ReserveManager->reserve_response,true);

                        if($reserve_response['status']){
                            //Add in Stand Transaction
                            $status = 'RESERVED';
                            add_in_stand_transaction($cart->customer_id,$cart_item,$status);
                            $cart_status = 'CONFIRMED';
                            update_cart_item_after_process($cart_item,$cart_status);
                            $process_status_arr[] = 'RESERVED';
                        }else{
                            $message = $reserve_response['msg'];
                            drupal_set_message($message,'error');
                            CNX_cart_delete_stand_from_taken_table($cart_item->stand_ref_id);
                            $cart_status = 'CANCELLED';
                            update_cart_item_after_process($cart_item,$cart_status);
                            $process_status_arr[] = 'FAILS';
                        }
                    }else{
                        $stand_status = check_stand_reserve($cart_item->stand_ref_id);
                        if($stand_status == 'RESERVED'){
                            $obj_config = new Config("d6");
                            $is_waitinglist_active = $obj_config::getvar("IS_WAITINGLIST");
                            if($is_waitinglist_active == 1){
                                //Add in Waiting List
                                add_in_waiting_list($cart_item,$cart->customer_id);
                                $cart_status = 'CONFIRMED';
                                update_cart_item_after_process($cart_item,$cart_status);
                                $process_status_arr[] = 'WAITLIST';
                            }else{
                                $message = 'Sorry, The stand <b>'.$cart_item->additional_info->stand_no.'</b> is already taken by another exhibitor. <br/> Please select another stand.';
                                drupal_set_message($message,'error');
                                CNX_cart_delete_stand_from_taken_table($cart_item->stand_ref_id);
                                $cart_status = 'CANCELLED';
                                update_cart_item_after_process($cart_item,$cart_status);
                                $process_status_arr[] = 'FAILS';
                            }
                        }elseif($stand_status == 'BOOKED'){
                            $message = 'Sorry, The stand <b>'.$cart_item->additional_info->stand_no.'</b> is already booked by another exhibitor. <br/> Please select another stand.';
                            drupal_set_message($message,'error');
                            CNX_cart_delete_stand_from_taken_table($cart_item->stand_ref_id);
                            $cart_status = 'CANCELLED';
                            update_cart_item_after_process($cart_item,$cart_status);
                            $process_status_arr[] = 'FAILS';
                        }else{
                            $message = 'Sorry, The stand <b>'.$cart_item->additional_info->stand_no.'</b> is already taken by another exhibitor. <br/> Please select another stand.';
                            drupal_set_message($message,'error');
                            CNX_cart_delete_stand_from_taken_table($cart_item->stand_ref_id);
                            $cart_status = 'CANCELLED';
                            update_cart_item_after_process($cart_item,$cart_status);
                            $process_status_arr[] = 'FAILS';
                        }
                    }
                }
                unset($_SESSION['cart']);
                if(in_array('RESERVED',$process_status_arr)){
                    drupal_goto('/mystands/reserved');
                }else if(in_array('WAITLIST',$process_status_arr)){
                    drupal_goto('/mystands/waitinglist');
                }else if(in_array('FAILS',$process_status_arr)){
                    // drupal_goto('/floorplan/html');
                    drupal_goto('/floorplan');
                }
            }else{
                drupal_set_message('Looks like your cart is empty. Please add stand in cart to continue.','error');
                drupal_goto('/floorplan');
            }
        }else{
            drupal_set_message('Sorry, issue while reserving stand. Please try again.','error');
            drupal_goto('/floorplan');
        }
    }else{
        drupal_goto('/user');
    }

}

function CNX_cart_delete_stand_from_taken_table($stand_ref_id){
    $sql = "DELETE FROM cnx_stands_taken WHERE stand_ref_id=%d";
    $query = db_query($sql, $stand_ref_id);
}

function check_stand_reserve($stand_ref_id)
{
    $status = 'NOTEXISTS';
    $sql = "SELECT stand_ref_id,status FROM cnx_stand_transaction WHERE stand_ref_id=%d AND status != 'CANCELLED' AND deleted = 0";
    $query = db_query($sql, $stand_ref_id);
    while ($row = db_fetch_array($query)) {
        $status = $row['status'];
    }
    return $status;
}

function add_in_stand_transaction($customer_id, $cart_item, $status)
{
    global $user;
    $user_info = user_load($user->uid);
    $obj_config = new Config("d6");
    $grace_period_config = $obj_config::get_grace_period_config();
    $reserved_grace_minutes = $grace_period_config['RESERVED']['grace_period_time_in_minutes'];
    // $reserved_grace_minutes = $obj_config::getvar("RESERVE_GRACE_MINUTES");
    if (isset($cart_item)) {
        $stand_transaction_obj = new StandTransactionRequestModel();

        $stand_transaction_obj->stand_transaction_id = '';
        $stand_transaction_obj->customer_id = $customer_id;
        $stand_transaction_obj->stand_ref_id = $cart_item->stand_ref_id;
        $stand_transaction_obj->product_key = $cart_item->product_key;
        $stand_transaction_obj->product_name = $cart_item->product_name;
        $stand_transaction_obj->description = $cart_item->description;
        $stand_transaction_obj->additional_info = $cart_item->additional_info;
        $stand_transaction_obj->quantity = $cart_item->quantity;
        $stand_transaction_obj->rate = $cart_item->rate;
        $stand_transaction_obj->total = $cart_item->total;
        $stand_transaction_obj->reserved_grace_minutes = $reserved_grace_minutes;
        $stand_transaction_obj->pricing_data = '';
        $stand_transaction_obj->status = $status;
        $stand_transaction_obj->notes = '';
        $stand_transaction_obj->reserved_on = date('Y-m-d H:i:s');
        $stand_transaction_obj->reserved_by = $user_info->profile_first_name . ' ' . $user_info->profile_last_name;

        $stand_transaction_manager = new StandTransactionManager($user->uid, $user->roles, $stand_transaction_obj);
        $stand_transaction_manager->save_stand_transaction();

        //ADD IN BOOKING HISTORY - 21-03-2024
        $action = "RESERVED";
        $stand_transaction_id = $stand_transaction_manager->stand_transaction->id;

        $stand_transaction_manager = new StandTransactionManager($user->uid, $user->roles, $stand_transaction_id);
        $stand_transaction_manager->add_booking_history($action,$stand_transaction_obj->reserved_by);
    }
}

function add_in_waiting_list($cart_item, $customer_id)
{
    global $user;
    if (isset($cart_item) && $customer_id != "") {
        $waiting_list_item_obj = new WaitinglistItemRequestModel();

        $waiting_list_item_obj->waiting_list_item_id = '';
        $waiting_list_item_obj->customer_id = $customer_id;
        $waiting_list_item_obj->stand_ref_id = $cart_item->stand_ref_id;
        $waiting_list_item_obj->additional_info = array(
            "product_key" => $cart_item->product_key,
            "product_name" => $cart_item->product_name,
            "description" => $cart_item->description,
            "stand_no" => $cart_item->additional_info->stand_no,
            "quantity" => $cart_item->quantity,
            "total" => $cart_item->total
        );
        $waiting_list_item_obj->sequence = '';

        $waitinglist_item_manager = new WaitingListItemManager($user->uid, $user->roles, $waiting_list_item_obj);
        $waitinglist_item_manager->save_waitinglist_item();
    }
}

function update_cart_item_after_process($cart_item, $status)
{
    global $user;
    if ($cart_item instanceof CartItemRequestModel) {
        $cart_item->status = $status;
        $cart_item_manager = new CartItemManager($user->uid, $cart_item);
        $cart_item_manager->save_cart_item($cart_item->cart_id, true);
    }
}


function library_test()
{
	echo 'library_test';

	// Cart details By ID
	// $user_id = 1;
	// $cart_id = 2;
	// $cart_manager = new CartManager($storefront_key,$customer_id,$user_id,$cart_id);
	// debug($cart_manager,1);
	// $cart = $cart_manager->get_cart();
	// debug($cart,1);


	$cart_req_obj = new CartRequestModel();

	$customer_id = '234233';
	$storefront_key = 'STANDS';
	$user_id = 1120;

    $cart_req_obj = new CartRequestModel();
	$cart_req_obj->cart_id = '';
	$cart_req_obj->customer_id = $customer_id;
	$cart_req_obj->user_id = $user_id;
	$cart_req_obj->item_count = '1';
	$cart_req_obj->currency = 'INR';
	$cart_req_obj->storefront_key = $storefront_key;

	$cart_items = array();

	$cart_item_req_obj = new CartItemRequestModel();

    $cart_item_req_obj->cart_item_id = '';
    $cart_item_req_obj->cart_id = $cart_req_obj->cart_id;
    $cart_item_req_obj->stand_ref_id = '215236';
    $cart_item_req_obj->product_key = 'SPC';
    $cart_item_req_obj->product_name = 'Space Only';
    $cart_item_req_obj->description = 'Space Only';
    $cart_item_req_obj->quantity = 36;
    $cart_item_req_obj->rate = 245;
    $cart_item_req_obj->total = '';
    $cart_item_req_obj->status = 'ADDED';
    $cart_item_req_obj->item_group_key = 'STANDBOOKING';

	$cart_items[] = $cart_item_req_obj;

	// $cart_item_req_obj = new CartItemRequestModel();

    // $cart_item_req_obj->cart_item_id = '';
    // $cart_item_req_obj->cart_id = $cart_req_obj->cart_id;
    // $cart_item_req_obj->stand_ref_id = '142515';
    // $cart_item_req_obj->product_key = 'SHS';
    // $cart_item_req_obj->product_name = 'Shell Standard';
    // $cart_item_req_obj->description = 'Shell Standard';
    // $cart_item_req_obj->quantity = 18;
    // $cart_item_req_obj->rate = 445;
    // $cart_item_req_obj->total = '';
    // $cart_item_req_obj->status = 'ADDED';
    // $cart_item_req_obj->item_group_key = 'STANDBOOKING';

	// $cart_items[] = $cart_item_req_obj;

	// debug($cart_item_req_obj);

	$cart_req_obj->cart_items = $cart_items;
	// debug($cart_req_obj,1);
	// // $cart_req_obj = 3;

	$cart_manager = new CartManager($storefront_key,$customer_id,$user_id,$cart_req_obj);
	// debug($cart_manager);

	// $save = true;
	// // $save = false;
	// $cart_manager->save_cart($save);
	// // debug($cart_manager);
	// $cart_response = $cart_manager->get_cart();
	// debug($cart_response);

	// $cart_request = $cart_manager->get_cart_request();
	// debug($cart_request);
	die;
}



function stand_details()
{
    $vars = array();
    unset($_SESSION['cart']);
    if(!isset($_SESSION['cart'])){
        $cart = set_cart();
        $_SESSION['cart'] = serialize($cart);
    }
    // $vars['stands'] = get_all_stands();
    debug($_SESSION['cart']);
    $outHTML = CNX_Cart_Get_Template('stand_details.tpl.php',$vars);
	debug($outHTML,1);
	return $outHTML;
}


function set_cart($customer_id = 0){
    global $user;
    $user_id = $user->uid;
    // $customer_id = ($_POST['customer_id'] != "")? $_POST['customer_id'] : 0;
    $storefront_key = 'STANDS';
    $cart_req_obj = null;
    if($user_id == 0){
        $cart_req_obj = new CartRequestModel();
        $cart_req_obj->cart_id = '';
        $cart_req_obj->customer_id = $customer_id;
        $cart_req_obj->user_id = $user_id;
        $cart_req_obj->currency = 'INR';
        $cart_req_obj->storefront_key = $storefront_key;
    }
    $cart_manager = new CartManager($storefront_key,$customer_id,$user_id,$cart_req_obj);
    $cart = $cart_manager->get_cart_request();
	return $cart;
}

function add_to_cart(){
    global $user;
    $data = file_get_contents('php://input');
    $response = array();

    if(trim($data) !== ''){
        $cart = unserialize($_SESSION['cart']);
        $data = json_decode($data);
        // watchdog('CART',print_r($cart,true));
        // watchdog('USER',print_r($user,true));
        if(count($data) > 0 && isset($cart) && !empty($cart)){
            // watchdog('CART','in if');
            $cart_item_req_obj = new CartItemRequestModel();

            $cart_item_req_obj->cart_item_id = '';
            $cart_item_req_obj->cart_id = $cart->cart_id;
            $cart_item_req_obj->stand_ref_id = $data->stand_ref_id;
            $cart_item_req_obj->product_key = $data->product_key;
            $cart_item_req_obj->product_name = $data->product_name;
            $cart_item_req_obj->description = $data->description;
            $cart_item_req_obj->additional_info = get_object_vars($data->additional_info);
            $cart_item_req_obj->quantity = $data->quantity;
            $cart_item_req_obj->rate = $data->rate;
            $cart_item_req_obj->total = '';
            $cart_item_req_obj->status = 'ADDED';
            $cart_item_req_obj->item_group_key = 'STANDBOOKING';

            $cart->cart_items[] = $cart_item_req_obj;

            $cart_manager = new CartManager($cart->storefront_key,$cart->customer_id,$cart->user_id,$cart);
            // debug($cart_manager);
            ($cart->user_id == 0)? $save = false : $save = true;
            $cart_manager->save_cart($save);
            $cart = $cart_manager->get_cart_request();

            $_SESSION['cart'] = serialize($cart);
            $response['status'] = $cart->cart_id;
            $response['payload'] = $cart;
            $response['message'] = 'Stand added to the cart';
        }else{
            // watchdog('CART','in else');
            $response['status'] = 0;
            $response['message'] = 'Error processing data';
        }
    }else{
        // watchdog('CART','in data else');
		$response['status'] = 0;
		$response['message'] = 'Error processing data';
	}
    // watchdog('CART',print_r($response,true));
    echo json_encode($response);
}

function cart_details(){
    $vars = array();
    $outHTML = CNX_Cart_Get_Template('cart_details.tpl.php',$vars);
	debug($outHTML,1);
}

function remove_cart_item(){
    global $user;
    $data = file_get_contents('php://input');
    $response = array();
    if(trim($data) !== ''){
        $cart = unserialize($_SESSION['cart']);
        $data = json_decode($data);

        $cart_item_id = $data->cart_item_id;
        $cart_id = $cart->cart_id;
        $customer_id = $cart->customer_id;

        if($cart_item_id > 0){
            $cart_item_manager = new CartItemManager($user->uid,$cart_item_id);
            $cart_item_manager->remove_cart_item(true);

            $cart_manager = new CartManager('STANDS',$customer_id,$user->user_id,$cart_id);
            ($user->user_id == 0)? $save = false : $save = true;
            $cart_manager->save_cart($save);
            $cart = $cart_manager->get_cart_request();

            $_SESSION['cart'] = serialize($cart);
            $response['status'] = $cart->cart_id;
            $response['payload'] = $cart;
            $response['message'] = 'Stand removed from the cart';
        }else{
            $response['status'] = 0;
            $response['message'] = 'Error processing data';
        }
    }else{
        $response['status'] = 0;
        $response['message'] = 'Error processing data';
    }
    echo json_encode($response);

    // $cart_item_id = json_decode($_POST['cart_item_id']);
    // $cart_id = json_decode($_POST['cart_id']);
    // $customer_id = json_decode($_POST['customer_id']);
    // debug($cart_item_id);

    // if($cart_item_id > 0){
    //     $cart_item_manager = new CartItemManager($user->uid,$cart_item_id);
    //     $cart_item_manager->remove_cart_item(true);

    //     $cart_manager = new CartManager('STANDS',$customer_id,$user->user_id,$cart_id);
    //     ($user->user_id == 0)? $save = false : $save = true;
    //     $cart_manager->save_cart($save);
    //     $cart = $cart_manager->get_cart_request();
    //     $_SESSION['cart'] = serialize($cart);
    //     drupal_goto('/cart/details');
    // }
}
